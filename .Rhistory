length(which(oldData$award>30000))
161/1010
length(which(oldData$award>30000 & oldData$outcome==1))
89/358
deposit.awards<-oldData[oldData$outcome==1]
summary(deposit.awards$award)
summary(oldData$award)
sd(oldData$award)
deposit.awards<-oldData[oldData$outcome==1,]
summary(deposit.awards$award)
summary(oldData$award)
sd(oldData$award)
deposit.awards<-oldData[oldData$outcome==1,]
summary(deposit.awards$award)
sd(oldData$award)
which(oldData$award==38390)
oldData[148,]
length(which(oldData$award>=27440))
253/1010
summary(deposit.awards$award)
sd(oldData$award)
length(which(deposit.awards$awards>=30000))
length(which(deposit.awards$award>=30000))
total.deposits
104/358
summary(oldData$award)
sd(oldData$award)
deposit.awards<-oldData[oldData$outcome==1,]
summary(deposit.awards$award)
sd(oldData$award)
summary(oldData$award)
sd(oldData$award)
deposit.awards<-oldData[oldData$outcome==1,]
summary(deposit.awards$award)
sd(oldData$award)
sd(deposit.awards$award)
20820-16140
4680/16140
*100
0.289*100
24490-15980
8510/15980
0.5325*100
length(which(oldData$award==0 & oldData$outcome==1))
no.award<-oldData[oldData$award==0 & oldData$outcome==1,]
summary(no.award$p_rank)
summary(no.award$a_rank)
no.award.admit<-oldData[oldData$award==0,]
no.award.deposit<-oldData[oldData$award==0 & oldData$outcome==1,]
summary(no.award.admit$a_rank)
summary(no.award.deposit$a_rank)
summary(no.award.admit$p_rank)
summary(no.award.deposit$p_rank)
summary(no.award.admit$a_rank)
summary(no.award.deposit$a_rank)
names(oldData)
corr(oldData$outcome,oldData$freshman)
cor(oldData$outcome,oldData$freshman)
names(oldData)
cor(oldData$outcome)
cor(oldData)
cor(oldData$outcome, na.rm=TRUE)
cor(oldData, na.rm=TRUE)
## ----------------------------------------------------------------------
cor(oldData)
cor(oldData, use="pairwise")
cor(oldData, use="pairwise.complete.obs")
cor(oldData, use="pairwise.complete.obs", method="pearson")
??aod
total.admits<-length(oldData$outcome)
total.deposits<-sum(oldData$outcome==1)
percent.total.deposits<-total.deposits/total.admits
total.admits
total.deposits
percent.total.deposits
oldData
names(oldData)
class(oldData)
class(oldData$id)
class(oldData$outcome)
class(oldData$hsgpa)
summary(oldData)
which(oldData$age==0)
oldData[628,]
mean(oldData$age)
median(oldData$age)
sd(oldData$age)
summary(oldData$age)
mean(oldData$age[-628,])
correct.age<-oldData[-628,]
mean(correct.age$age)
median(correct.age$age)
sd(correct.age$age)
summary(oldData)
summary(oldDAta$hsgpa)
summary(oldData$hsgpa
)
which(oldData$hsgpa==4)
x<-which(oldData$hsgpa==4)
x
oldData[28,]
oldData[oldData$hsgpa==4]
x<-oldData[oldData$hsgpa==4]
x<-oldData[oldData$hsgpa== 4]
x<-oldData[oldData$hsgpa== 4,]
x
x<-oldData[oldData$hsgpa==4,]
x
x<-oldData[oldData$hsgpa>=4]
x<-oldData[oldData$hsgpa>=4,]
x
x<-oldData[oldData$hsgpa>=4 && !is.na(oldData$hsgpa),]
x
x<-oldData[oldData$hsgpa==4 && !is.na(oldData$hsgpa),]
x
x<-oldData[oldData$hsgpa==4 & !is.na(oldData$hsgpa),]
x
correlationMatrix<-cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix<-as.data.frame(correlationMatrix)
correlationMatrix<-cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix<-as.data.frame(correlationMatrix)
correlationMatrix
x<-c(1,2,10,5,9)
x
x[>abs(2)]
x[x>abs(2)]
x<-c(0.1,-0.3,-0.7,0.98,0.2,-0.01)
x
x[x>=abs(0.3)]
??(abs)
abs()
?abs()
abs(-0.3)
x[x>=abs(0.3)]
x<--9:9
x
x[x>=abs(3)]
correlationMatrix[correlationMatrix>abs(0.3)]
summary(correlationMatrix)
correlationMatrix<-cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix
class(correlationMatrix)
correlationMatrix[correlationMatrix>abs(0.3)]
correlationMatrix[1]
correlationMatrix[1,]
correlationMatrix[2,]
names(oldData)
install.packages("psych")
library(psych)
solution <- fa(r = corMat, nfactors = 4, rotate = "oblimin", fm = "pa")
corMat<-cor(oldData, use="pairwise.complete.obs", method="pearson")
corMat
solution <- fa(r = corMat, nfactors = 4, rotate = "oblimin", fm = "pa")
yes
??fa()
??psych
?fa()
solution <- fa(r = corMat, nfactors = 4, rotate = "oblimin", fm = "pa")
solution <- fa(r = corMat, nfactors = 4, rotate = "oblimin")
solution <- fa(r = corMat, nfactors = 4, rotate = "oblimin", fm = "pa",missing=TRUE)
y
eigen(corMat)
corMat
eigenvalue(corMat)
eigen(corMat)
??eigen
??eigen()
eigen(cor(oldData,use="complete.obs"))
eigen(cor(oldData,use="complete.obs"))
corMat<-cor(oldData, use="pairwise.complete.obs", method="pearson")
corMat
library(ggplot2)
??aod
??car
??xtabs
names(oldData)
logit.output<-glm(outcome ~ freshman+ed+age+female+white+newengland+intl+married+hsgpa+hsrank+
sat+act+a_rank+p_rank+interview+award,
family= binomial(logit),data = OldData)
oldData
logit.output<-glm(outcome ~ freshman+ed+age+female+white+newengland+intl+married+hsgpa+hsrank+
sat+act+a_rank+p_rank+interview+award,
family= binomial(logit),data = oldData)
summary(logit.output)
logit.output<-glm(outcome ~ freshman+ed+age+female+white+newengland+married+hsgpa+hsrank+
sat+act+a_rank+p_rank+interview+award,
family= binomial(logit),data = oldData)
summary(logit.output)
logit.output<-glm(outcome ~ freshman+age+female+a_rank+p_rank+
white+int+log(award),
family= binomial(logit),data = oldData)
summary(logit.output)
names(oldData)
logit.output<-glm(outcome ~ freshman+age+female+a_rank+p_rank+
white+int+log(award),
family= binomial(logit),data = oldData)
logit.output<-glm(outcome ~ freshman+age+female+a_rank+p_rank+
white+interview+log(award),
family= binomial(logit),data = oldData)
summary(logit.output)
names(oldData)
length(oldData$outcome)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + intl + married,
family= binomial(logit),data = oldData)
summary(logit.output)
names(oldData)
sum(oldData$ed)
which(oldData$ed==1)
oldData[oldData$ed==1]
x<-oldData[oldData$ed==1,]
x
which(oldData[oldData$ed==1 & oldData$outcome==0])
which(oldData$ed==1 & oldDAta$outcome==0)
which(oldData$ed==1 & oldData$outcome==0)
oldData[1,]
oldData[1,14]
x<-oldData[oldData$ed==1 & oldData$outcome==0,]
x
oldData[26,]
names(oldData)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + intl + married + hsgpa + hsrank + sat + act + a_rank + p_rank + interview
+ award,
family= binomial(logit),data = oldData)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married + hsgpa + hsrank + sat + act + a_rank + p_rank + interview
+ award,
family= binomial(logit),data = oldData)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married,
family= binomial(logit),data = oldData)
summary(logit.output)
names(oldDAta)
names(oldData)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married + hsgpa,
family= binomial(logit),data = oldData)
summary(oldData$hsgpa)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married + hsrank,
family= binomial(logit),data = oldData)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married + sat
family= binomial(logit),data = oldData)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married + sat,
family= binomial(logit),data = oldData)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + married + act,
family= binomial(logit),data = oldData)
summary(logit.output)
oldData
class(oldData)
newData<-data.frame
newData
nrows(oldData)
nrow(oldData)
ncol(oldData)
oldData.reg<-data.frame(NA,nrow=1010,ncol=18)
oldData.reg
oldData.reg[,1]<-oldData$id
oldData[,1]
oldData.reg[1,]
x<-data.frame(matrix(0,nrow=2,ncol=10))
x
class(X)
class(X)
class(x)
class(oldData)
oldData.reg<-oldData
oldData.reg
oldData.reg["hs_info"]<-NA
names(oldData.reg)
hs_dummy<-as.numeric(oldData$hsgpa>0 $ !is.na(oldData$hsgpa))
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa))
hs_dummy
length(hs_dummy)
sum(hs_dummy)
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
hs_dummy
sum(hs_dummy)
sum(oldData$hsrank>0 & !is.na(oldData$hsrank) | oldData$hsgpa>0 & !is.na(oldData$hsgpa))
names(oldData.reg)
oldData.reg$hs_info<-oldData.reg["hs_dummy"]
oldData.reg<-subset(oldData.reg,select=-hs_info)
names(oldData.reg)
oldData.reg$hs_dummy<-hs_dummy
names(oldData.reg)
oldData.reg<-subset(oldData.reg,select=-hsgpa,-hsrank)
oldData.reg<-subset(oldData.reg,select=-hsgpa & -hsrank)
names(oldData.reg)
oldData.reg<-subset(oldData.reg,select=-hsgpa)
names(oldData.reg)
oldData.reg<-subset(oldData.reg,select= oldData$hsgpa)
oldData.reg<-subset(oldData.reg,select= +oldData$hsgpa)
names(oldData.reg)
names(oldData.reg)
oldData.reg<-subset(oldData.reg,select=-hsrank)
names(oldData.reg)
oldData$hs_dummy
oldDAta.reg$hs_dummy
oldData.reg$hs_dummy
names(oldData.reg)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland + intl+ married + sat + act + a_rank + p_rank + interview + award +
hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female +
white + newengland,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
names(oldData.reg)
summary(oldData.reg)
which(oldData.reg$age==0)
oldData.reg[628,]
oldData.reg[628,]$age
oldData.reg[628,]$age==NA
oldData.reg[628,]
oldData.reg[628,]$age<-NA
oldData.reg[628,]
summary(oldData.reg)
logit.output<-glm(outcome ~ freshman,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
names(oldData.reg)
logit.output<-glm(outcome ~ freshman + ed + age + female + white,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
sat + act + a_rank + p_rank + interview + award + hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + award + hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + log(award) + hs_dummy,
family= binomial(logit),data = oldData.reg)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + log(award) + hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + log(award) + hs_dummy,
family= binomial(logit),data = oldData.reg)
??log()
log(oldData.reg$award)
log(0)
hist(oldData.reg$award)
hist(log(oldData.reg$award))
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + award + hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
log(oldData.reg$award+1)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + log(award+1) + hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
sat + act + a_rank + p_rank + interview + award + hs_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
test_dummy<-as.numeric(oldData$sat>0 $ !is.na(oldData$sat) | oldData$act>0 $ !is.na(oldData$act))
test_dummy<-as.numeric(oldData$sat>0 $ !is.na(oldData$sat) | oldData$act>0 $ !is.na(oldData$act))
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
test_dummy
oldData.reg$test_dummy<-test_dummy
names(oldData.reg)
oldData.reg<-subset(oldData.reg,select=-sat & -act)
names(oldData.reg)
??subset()
oldData.reg<-subset(oldData.reg,select=-sat)
names(oldData.reg)
oldData.reg<-subset(oldData.reg,select=-act)
names(oldData.reg)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
oldData[oldData$intl==1]
oldData[oldData$intl==1,]
logit.output<-glm(outcome ~ freshman + ed + age + female + white + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman * ed + age + female + white + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female * white + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age  + intl +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age  + intl + female + white +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = oldData.reg)
summary(logit.output)
names(oldData.reg)
??confint()
confint(logit.output)
# CI using profiled log-likelihood
confint(logit.output)
# CI using standard errors
confint.default(logit.output)
# Odds ratios and confidence intervals utilizing standard errors
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
library(MASS)
stepAIC(glm(outcome ~ freshman + ed + age  + intl + female + white +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,binomial,data=oldData.reg)
)
y
names(oldData.reg)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
stepAIC(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
??stepAIC
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
??predict()
x<-oldData.reg[500,]
x
predict(logit.output,x)
predict(logit.output,data=x,type="response")
x
predict(logit.output,data=oldData.reg,type="response")
oldData.reg[1,]
oldData[1007,]
oldData[971,]
oldData[925,]
oldData[924,]
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
summary(logit.output)
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
e^1
exp(1)
exp(3.87)
exp(3.873)
exp(0.309*(25-18))
exp(0.386*(5-1))
summary(logit.output)
stepAIC(logit.output)
anova(logit.output,test="Chisq")
stepAIC(logit.output)
anova(logit.output,test="Chisq")
anova(logit.output,test="Chisq")
logit.output<-glm(outcome ~ freshman + ed + age + female * white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
logit.output<-glm(outcome ~ freshman + ed + age + female * white * newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
logit.output<-glm(outcome ~ freshman * age  + ed + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
logit.output<-glm(outcome ~ freshman + age  + ed + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
stepAIC(logit.output)
7.6868*10^-5
bestfit.logit.output<-glm(outcome ~ freshman + ed + age +  a_rank  + interview + award + hs_dummy ,
family= binomial(logit),data = na.omit(oldData.reg))
summary(bestfit.logit.output)
exp(cbind(OR=coef(bestfit.logit.output),confint.default(bestfit.logit.output)))
x<-predict(bestfit.logit.output)
y<-resid(bestfit.logit.output)
binnedplot(x,y)
??binnedplot
install.packages(arm)
install.packages("arm")
library(arm)
x<-predict(bestfit.logit.output)
y<-resid(bestfit.logit.output)
binnedplot(x,y)
x<-predict(bestfit.logit.output)
y<-resid(bestfit.logit.output)
binnedplot(x,y)
??binnedplot
x<-bestfit.logit.output
y<-resid(bestfit.logit.output)
binnedplot(x,y)
predict(bestfit.logit.output)
x<-predict(bestfit.logit.output,newdata=oldData,type="response")
y<-resid(bestfit.logit.output)
binnedplot(x,y)
x<-predict(bestfit.logit.output,newdata=oldData.reg,type="response")
y<-resid(bestfit.logit.output)
binnedplot(x,y)
x<-predict(bestfit.logit.output,type="response")
y<-resid(bestfit.logit.output)
binnedplot(x,y)
